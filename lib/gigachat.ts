import https from 'https';
import { Agent } from 'https';
import axios, { AxiosInstance } from 'axios';

interface GigaChatToken {
  access_token: string;
  expires_in: number;
  expires_at: number;
}

interface GigaChatMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

interface GigaChatResponse {
  choices: Array<{
    message: {
      content: string;
      role: string;
    };
    index: number;
    finish_reason: string;
  }>;
  created: number;
  model: string;
  object: string;
  usage: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

// –°–æ–∑–¥–∞—ë–º HTTPS –∞–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ –ú–∏–Ω—Ü–∏—Ñ—Ä—ã
function createGigaChatAgent(): Agent {
  const fs = require('fs');
  const path = require('path');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—É—Ç–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É
  let certPath = process.env.GIGACHAT_CA_BUNDLE_PATH;
  
  // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏–∑ –ø–∞–ø–∫–∏ certs
  if (!certPath) {
    const defaultCertPath = path.join(process.cwd(), 'certs', 'russian_trusted_root_ca_pem.crt');
    if (fs.existsSync(defaultCertPath)) {
      certPath = defaultCertPath;
    }
  }
  
  // –ï—Å–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (certPath && fs.existsSync(certPath)) {
    try {
      const ca = fs.readFileSync(certPath);
      console.log('‚úÖ Using Russian Trusted Root CA certificate:', certPath);
      return new https.Agent({
        ca,
        rejectUnauthorized: true
      });
    } catch (error) {
      console.warn('‚ö†Ô∏è  Failed to load CA bundle, falling back to insecure agent:', error);
    }
  }

  // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–≥–µ–Ω—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è dev!)
  if (process.env.NODE_ENV === 'development' || process.env.GIGACHAT_INSECURE === 'true') {
    console.warn('‚ö†Ô∏è  WARNING: Using insecure HTTPS agent. Only for development!');
    console.warn('‚ö†Ô∏è  To fix this, set GIGACHAT_CA_BUNDLE_PATH or place certificate in certs/russian_trusted_root_ca_pem.crt');
    return new https.Agent({
      rejectUnauthorized: false
    });
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ –ú–∏–Ω—Ü–∏—Ñ—Ä—ã)
  console.warn('‚ö†Ô∏è  No certificate configured. Requests may fail. Set GIGACHAT_CA_BUNDLE_PATH or GIGACHAT_INSECURE=true');
  return new https.Agent();
}

class GigaChatAPI {
  private token: GigaChatToken | null = null;
  private readonly clientId: string;
  private readonly clientSecret: string;
  private readonly authKey: string;
  private readonly oauthUrl: string;
  private readonly apiUrl: string;
  private readonly httpsAgent: Agent;
  private readonly axiosInstance: AxiosInstance;

  constructor() {
    this.clientId = process.env.GIGACHAT_CLIENT_ID!;
    this.clientSecret = process.env.GIGACHAT_CLIENT_SECRET!;
    this.authKey = process.env.GIGACHAT_AUTHORIZATION_KEY!;
    this.oauthUrl = process.env.GIGACHAT_OAUTH_URL || 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth';
    this.apiUrl = process.env.GIGACHAT_API_URL || 'https://gigachat.devices.sberbank.ru/api/v1';
    this.httpsAgent = createGigaChatAgent();
    
    // –°–æ–∑–¥–∞—ë–º axios instance —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º HTTPS agent
    this.axiosInstance = axios.create({
      httpsAgent: this.httpsAgent,
      timeout: 30000
    });
  }

  private async getAccessToken(): Promise<string> {
    // Check if token is valid and not expired
    if (this.token && Date.now() < this.token.expires_at) {
      return this.token.access_token;
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º axios —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º HTTPS agent –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ú–∏–Ω—Ü–∏—Ñ—Ä—ã
      const response = await this.axiosInstance.post(
        this.oauthUrl,
        'scope=GIGACHAT_API_PERS',
        {
          headers: {
            'Authorization': `Basic ${this.authKey}`,
            'RqUID': crypto.randomUUID(),
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'application/json'
          }
        }
      );

      const data = response.data;
      
      this.token = {
        access_token: data.access_token,
        expires_in: data.expires_in,
        expires_at: Date.now() + (data.expires_in * 1000) - 60000 // Refresh 1 minute early
      };

      return this.token.access_token;
    } catch (error: any) {
      console.error('Failed to obtain GigaChat access token:', error);
      if (error.response) {
        console.error('OAuth response:', error.response.data);
        throw new Error(`OAuth request failed: ${error.response.status} ${error.response.statusText}`);
      }
      throw new Error('Authentication failed');
    }
  }

  async sendMessage(messages: GigaChatMessage[], model: string = process.env.GIGACHAT_MODEL || 'GigaChat', retries: number = 2): Promise<string> {
    let lastError: any = null;
    
    for (let attempt = 0; attempt <= retries; attempt++) {
      try {
        const accessToken = await this.getAccessToken();

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        // GigaChat 2.0 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 200 —Å—Ç—Ä–∞–Ω–∏—Ü A4 (~128k —Ç–æ–∫–µ–Ω–æ–≤)
        // –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ª–∏–º–∏—Ç: ~100k —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const MAX_CONTENT_LENGTH = 100000;
        const totalContentLength = messages.reduce((sum, msg) => sum + msg.content.length, 0);
        if (totalContentLength > MAX_CONTENT_LENGTH) {
          console.warn(`‚ö†Ô∏è  Content length (${totalContentLength}) exceeds limit (${MAX_CONTENT_LENGTH}). Truncating...`);
          
          // –û–±—Ä–µ–∑–∞–µ–º —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ user —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
          const userMessages = messages.filter(m => m.role === 'user');
          if (userMessages.length > 0) {
            const longestUserMsg = userMessages.reduce((longest, msg) => 
              msg.content.length > longest.content.length ? msg : longest
            );
            const maxUserContentLength = MAX_CONTENT_LENGTH - 10000; // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è system messages
            if (longestUserMsg.content.length > maxUserContentLength) {
              longestUserMsg.content = longestUserMsg.content.substring(0, maxUserContentLength) + '... [truncated]';
            }
          }
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ (–±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        console.log(`üì§ GigaChat API request (attempt ${attempt + 1}/${retries + 1}):`, {
          model,
          messagesCount: messages.length,
          totalContentLength: messages.reduce((sum, msg) => sum + msg.content.length, 0),
          endpoint: `${this.apiUrl}/chat/completions`
        });

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º axios —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º HTTPS agent
        const response = await this.axiosInstance.post<GigaChatResponse>(
          `${this.apiUrl}/chat/completions`,
          {
            model,
            messages,
            temperature: 0.7,
            // GigaChat 2.0 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ–ª—å—à–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º max_tokens
            // –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–π –Ω—É–∂–Ω—ã –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            max_tokens: parseInt(process.env.GIGACHAT_MAX_TOKENS || '4096', 10)
          },
          {
            headers: {
              'Authorization': `Bearer ${accessToken}`,
              'Content-Type': 'application/json'
            }
          }
        );

        const data = response.data;
        
        if (!data.choices || data.choices.length === 0) {
          throw new Error('No response generated');
        }

        console.log('‚úÖ GigaChat API response received:', {
          model: data.model,
          finishReason: data.choices[0].finish_reason,
          tokens: data.usage?.total_tokens || 'unknown'
        });

        return data.choices[0].message.content;
      } catch (error: any) {
        lastError = error;
        
        // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        console.error(`‚ùå GigaChat API error (attempt ${attempt + 1}/${retries + 1}):`, {
          message: error.message,
          code: error.code,
          status: error.response?.status,
          statusText: error.response?.statusText,
        });

        if (error.response) {
          const errorData = error.response.data;
          console.error('üìã Full error response data:', JSON.stringify(errorData, null, 2));
          console.error('üìã Error response headers:', error.response.headers);

          // –î–ª—è 422 –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
          if (error.response.status === 422) {
            console.error('‚ö†Ô∏è  422 Unprocessable Entity - Request validation failed');
            console.error('üìã Request payload preview:', {
              model,
              messagesCount: messages.length,
              messageLengths: messages.map(m => ({ role: m.role, length: m.content.length })),
              firstMessagePreview: messages[0]?.content?.substring(0, 200) + '...'
            });
          }

          // Retry —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ (5xx) –∏–ª–∏ rate limit (429)
          const isRetryable = error.response.status >= 500 || error.response.status === 429;
          
          if (isRetryable && attempt < retries) {
            const delay = Math.pow(2, attempt) * 1000; // Exponential backoff
            console.log(`‚è≥ Retrying in ${delay}ms...`);
            await new Promise(resolve => setTimeout(resolve, delay));
            continue;
          }

          // –î–ª—è 422 –∏ –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –¥–µ–ª–∞–µ–º retry
          throw new Error(`API request failed: ${error.response.status} ${error.response.statusText}. Details: ${JSON.stringify(errorData)}`);
        }

        // –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –¥–µ–ª–∞–µ–º retry
        if (attempt < retries && (error.code === 'ECONNRESET' || error.code === 'ETIMEDOUT' || error.code === 'ENOTFOUND')) {
          const delay = Math.pow(2, attempt) * 1000;
          console.log(`‚è≥ Network error, retrying in ${delay}ms...`);
          await new Promise(resolve => setTimeout(resolve, delay));
          continue;
        }

        throw error;
      }
    }

    throw lastError || new Error('Failed after retries');
  }

  async estimateJobGrade(jobContent: string): Promise<any> {
    const messages: GigaChatMessage[] = [
      {
        role: 'system',
        content: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ —É—Ä–æ–≤–Ω—è –ø–æ–∑–∏—Ü–∏–π –≤ IT –∏ –¥—Ä—É–≥–∏—Ö —Å—Ñ–µ—Ä–∞—Ö. –û–ø—Ä–µ–¥–µ–ª—è–π –≥—Ä–µ–π–¥ –ø–æ–∑–∏—Ü–∏–∏ (Junior, Middle, Senior, Lead) –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, –æ–ø—ã—Ç–∞ –∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤. –î–∞–∂–µ –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ—Ç–æ—á–Ω–æ–µ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ. –í–µ—Ä–Ω–∏ –æ—Ü–µ–Ω–∫—É –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
        {
          "level": "Junior" | "Middle" | "Senior" | "Lead" | "Unknown",
          "score": —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5 (1=Junior, 2=Junior+, 3=Middle, 4=Senior, 5=Lead),
          "confidence": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ü–µ–Ω–∫–µ),
          "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –æ–ø—ã—Ç–∞, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, –∑–∞—Ä–ø–ª–∞—Ç—ã"
        }`
      },
      {
        role: 'user',
        content: `–û–ø—Ä–µ–¥–µ–ª–∏ –≥—Ä–µ–π–¥ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏: ${jobContent}`
      }
    ];

    const response = await this.sendMessage(messages);
    
    try {
      let jsonString = response.trim();
      const jsonMatch = jsonString.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        jsonString = jsonMatch[0];
      }
      const grade = JSON.parse(jsonString);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      const validLevels = ['Junior', 'Middle', 'Senior', 'Lead', 'Unknown'];
      return {
        level: validLevels.includes(grade.level) ? grade.level : 'Unknown',
        score: Math.max(1, Math.min(5, parseInt(grade.score) || 3)),
        confidence: Math.max(0, Math.min(100, parseInt(grade.confidence) || 50)),
        reasoning: grade.reasoning || '–û—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π'
      };
    } catch (error) {
      console.error('Failed to parse job grade JSON:', error);
      return {
        level: 'Unknown',
        score: 3,
        confidence: 0,
        reasoning: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä–µ–π–¥ –ø–æ–∑–∏—Ü–∏–∏'
      };
    }
  }

  async analyzeJobPosting(jobContent: string): Promise<any> {
    const messages: GigaChatMessage[] = [
      {
        role: 'system',
        content: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫—Ä–∞—Å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤, –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –∏–Ω—Å–∞–π—Ç—ã. –í–µ—Ä–Ω–∏ –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª–µ–¥—É—é—â–µ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ:
        {
          "redFlags": ["—Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫—Ä–∞—Å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤"],
          "requirements": {
            "realistic": ["—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"],
            "unrealistic": ["–Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–ª–∏ —á—Ä–µ–∑–º–µ—Ä–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"]
          },
          "salaryInsight": "–æ—Ü–µ–Ω–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π",
          "workLifeBalance": "–æ—Ü–µ–Ω–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ work-life balance",
          "companyInsights": "–∏–Ω—Å–∞–π—Ç—ã –æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫—É–ª—å—Ç—É—Ä–µ",
          "atsKeywords": ["–≤–∞–∂–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è ATS –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"],
          "recommendedSkills": ["–Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ü–µ–Ω–Ω—ã–º–∏"],
          "overallScore": "–æ—Ü–µ–Ω–∫–∞ –∏–∑ 10 —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º"
        }`
      },
      {
        role: 'user',
        content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é: ${jobContent}`
      }
    ];

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ü–µ–Ω–∫—É –≥—Ä–µ–π–¥–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const [analysisResponse, jobGrade] = await Promise.all([
      this.sendMessage(messages),
      this.estimateJobGrade(jobContent)
    ]);
    
    try {
      // Try to extract JSON from response if it's wrapped in text
      let jsonString = analysisResponse.trim();
      const jsonMatch = jsonString.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        jsonString = jsonMatch[0];
      }
      const analysis = JSON.parse(jsonString);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –≥—Ä–µ–π–¥–∞ –∫ –∞–Ω–∞–ª–∏–∑—É
      return {
        ...analysis,
        jobGrade
      };
    } catch (error) {
      // If JSON parsing fails, try to return a structured response with fallback
      console.error('Failed to parse job analysis JSON:', error);
      return {
        redFlags: [],
        requirements: { realistic: [], unrealistic: [] },
        salaryInsight: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è',
        workLifeBalance: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å work-life balance',
        companyInsights: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å–∞–π—Ç—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏',
        atsKeywords: [],
        recommendedSkills: [],
        overallScore: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å (0/10)',
        jobGrade,
        rawResponse: analysisResponse
      };
    }
  }

  async generateCoverLetter(jobContent: string, userInfo: any, jobAnalysis?: any): Promise<string> {
    const analysisContext = jobAnalysis ? `
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏:
- –ì—Ä–µ–π–¥ –ø–æ–∑–∏—Ü–∏–∏: ${jobAnalysis.jobGrade?.level || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
- ATS –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${jobAnalysis.atsKeywords?.join(', ') || '–Ω–µ—Ç'}
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏: ${jobAnalysis.recommendedSkills?.join(', ') || '–Ω–µ—Ç'}
- –ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏ (–∏–∑–±–µ–≥–∞—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è): ${jobAnalysis.redFlags?.join(', ') || '–Ω–µ—Ç'}
- –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏: ${jobAnalysis.overallScore || '–Ω–µ—Ç'}
` : '';

    const messages: GigaChatMessage[] = [
      {
        role: 'system',
        content: `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∏—Å–∞—Ç–µ–ª—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ ATS-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–ª–µ–Ω–∏—è—Ö. –°–æ–∑–¥–∞–≤–∞–π —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∫–ª—é—á–∞—é—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞—é—Ç —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é.`
      },
      {
        role: 'user',
        content: `–°–æ–∑–¥–∞–π ATS-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏: ${jobContent}

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ${JSON.stringify(userInfo)}
${analysisContext}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ, –∫–æ—Ç–æ—Ä–æ–µ:
1. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞
2. –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç –∏ –Ω–∞–≤—ã–∫–∏ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
3. –£—á–∏—Ç—ã–≤–∞–µ—Ç –≥—Ä–µ–π–¥ –ø–æ–∑–∏—Ü–∏–∏ (${jobAnalysis?.jobGrade?.level || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'})
4. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–Ω—Ç—É–∑–∏–∞–∑–º –∫ —Ä–æ–ª–∏
5. –î—Ä—É–∂–µ–ª—é–±–Ω–æ –∫ ATS —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
6. –ò–∑–±–µ–≥–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∏–∑ –∫—Ä–∞—Å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤`
      }
    ];

    return await this.sendMessage(messages);
  }

  async optimizeResumeForJob(resumeContent: string, jobContent: string, jobAnalysis?: any, currentResume?: string): Promise<string> {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
    // GigaChat 2.0 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ–ª—å—à–∏–µ —Ç–µ–∫—Å—Ç—ã
    const MAX_RESUME_LENGTH = 80000;
    let processedResumeContent = resumeContent.trim();
    if (processedResumeContent.length > MAX_RESUME_LENGTH) {
      processedResumeContent = processedResumeContent.substring(0, MAX_RESUME_LENGTH) + '... [truncated]';
    }

    const MAX_JOB_CONTENT_LENGTH = 40000;
    let processedJobContent = jobContent.trim();
    if (processedJobContent.length > MAX_JOB_CONTENT_LENGTH) {
      processedJobContent = processedJobContent.substring(0, MAX_JOB_CONTENT_LENGTH) + '... [truncated]';
    }

    const analysisContext = jobAnalysis ? `
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏:
- –ì—Ä–µ–π–¥ –ø–æ–∑–∏—Ü–∏–∏: ${jobAnalysis.jobGrade?.level || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
- ATS –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏—Ç—å): ${jobAnalysis.atsKeywords?.join(', ') || '–Ω–µ—Ç'}
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏: ${jobAnalysis.recommendedSkills?.join(', ') || '–Ω–µ—Ç'}
- –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${jobAnalysis.requirements?.realistic?.join(', ') || '–Ω–µ—Ç'}
` : '';

    const messages: GigaChatMessage[] = [
      {
        role: 'system',
        content: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏. –°–æ–∑–¥–∞–≤–∞–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ä–µ–∑—é–º–µ, –∫–æ—Ç–æ—Ä–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è ATS-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞. –°–æ—Ö—Ä–∞–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –ø—Ä–∞–≤–¥–∏–≤–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä—É–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –ø–æ–¥ –≤–∞–∫–∞–Ω—Å–∏—é.`
      },
      {
        role: 'user',
        content: `–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —ç—Ç–æ —Ä–µ–∑—é–º–µ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é:

–í–ê–ö–ê–ù–°–ò–Ø:
${processedJobContent}
${analysisContext}

–¢–ï–ö–£–©–ï–ï –†–ï–ó–Æ–ú–ï:
${processedResumeContent}

–°–æ–∑–¥–∞–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ä–µ–∑—é–º–µ, –∫–æ—Ç–æ—Ä–∞—è:
1. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
2. –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏ (ATS-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
3. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç –æ–ø—ã—Ç –∏ –Ω–∞–≤—ã–∫–∏ –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
4. –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≥—Ä–µ–π–¥—É –ø–æ–∑–∏—Ü–∏–∏ (${jobAnalysis?.jobGrade?.level || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'})
5. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
6. –î–µ–ª–∞–µ—Ç –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–º –æ–ø—ã—Ç–µ

–í–µ—Ä–Ω–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –≥–æ—Ç–æ–≤–æ–µ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.`
      }
    ];

    return await this.sendMessage(messages);
  }

  async analyzeResume(resumeContent: string, jobContent?: string): Promise<any> {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–µ–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–µ–∑—é–º–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    // GigaChat 2.0 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ–ª—å—à–∏–µ —Ç–µ–∫—Å—Ç—ã (–¥–æ 200 —Å—Ç—Ä–∞–Ω–∏—Ü A4)
    const MAX_RESUME_LENGTH = 80000; // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ
    const MAX_JOB_CONTENT_LENGTH = 40000; // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π –≤–∞–∫–∞–Ω—Å–∏–π
    
    let processedResumeContent = resumeContent.trim();
    if (processedResumeContent.length > MAX_RESUME_LENGTH) {
      console.warn(`‚ö†Ô∏è  Resume content too long (${processedResumeContent.length} chars), truncating to ${MAX_RESUME_LENGTH} chars`);
      processedResumeContent = processedResumeContent.substring(0, MAX_RESUME_LENGTH) + '... [truncated]';
    }

    let processedJobContent = jobContent?.trim();
    if (processedJobContent && processedJobContent.length > MAX_JOB_CONTENT_LENGTH) {
      console.warn(`‚ö†Ô∏è  Job content too long (${processedJobContent.length} chars), truncating to ${MAX_JOB_CONTENT_LENGTH} chars`);
      processedJobContent = processedJobContent.substring(0, MAX_JOB_CONTENT_LENGTH) + '... [truncated]';
    }

    const jobContext = processedJobContent ? `\n\n–í–∞–∫–∞–Ω—Å–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${processedJobContent}` : '';
    
    const messages: GigaChatMessage[] = [
      {
        role: 'system',
        content: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—é–º–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –í–µ—Ä–Ω–∏ –∞–Ω–∞–ª–∏–∑ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
        {
          "atsCompatibility": "–æ—Ü–µ–Ω–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ATS",
          "strengths": ["—Å–ø–∏—Å–æ–∫ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω"],
          "improvements": ["–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"],
          "missingKeywords": ["–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å"],
          "formatting": "–æ—Ü–µ–Ω–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
          "skillsGap": ["–Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å"],
          "overallScore": "–æ—Ü–µ–Ω–∫–∞ –∏–∑ 10 —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º"
        }`
      },
      {
        role: 'user',
        content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Ä–µ–∑—é–º–µ: ${processedResumeContent}${jobContext}`
      }
    ];

    try {
      const response = await this.sendMessage(messages);
      
      try {
        // Try to extract JSON from response if it's wrapped in text
        let jsonString = response.trim();
        const jsonMatch = jsonString.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          jsonString = jsonMatch[0];
        }
        return JSON.parse(jsonString);
      } catch (error) {
        // If JSON parsing fails, try to return a structured response with fallback
        console.error('Failed to parse resume analysis JSON:', error);
        console.error('Raw response:', response.substring(0, 500));
        return {
          atsCompatibility: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å ATS',
          strengths: [],
          improvements: [],
          missingKeywords: [],
          formatting: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
          skillsGap: [],
          overallScore: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å (0/10)',
          rawResponse: response
        };
      }
    } catch (error: any) {
      console.error('Resume analysis failed:', error);
      throw error;
    }
  }

  async generateFollowUpEmail(applicationData: {
    company: string;
    position: string;
    appliedDate: string;
    notes?: string;
    status?: string;
  }): Promise<string> {
    const messages: GigaChatMessage[] = [
      {
        role: 'system',
        content: `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∏—Å–∞—Ç–µ–ª—å –¥–µ–ª–æ–≤—ã—Ö –ø–∏—Å–µ–º. –°–æ–∑–¥–∞–≤–∞–π –≤–µ–∂–ª–∏–≤—ã–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ follow-up –ø–∏—Å—å–º–∞ –¥–ª—è HR-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é. –ü–∏—Å—å–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º–∏, –≤–µ–∂–ª–∏–≤—ã–º–∏ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤ –ø–æ–∑–∏—Ü–∏–∏.`
      },
      {
        role: 'user',
        content: `–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ follow-up –ø–∏—Å—å–º–æ –¥–ª—è HR-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏ ${applicationData.company} –ø–æ –ø–æ–∑–∏—Ü–∏–∏ "${applicationData.position}".

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
- –î–∞—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞: ${applicationData.appliedDate}
- –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${applicationData.status || 'applied'}
${applicationData.notes ? `- –ó–∞–º–µ—Ç–∫–∏: ${applicationData.notes}` : ''}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∏—Å—å–º—É:
1. –í–µ–∂–ª–∏–≤–æ–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
2. –ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–≤–æ–µ–º –æ—Ç–∫–ª–∏–∫–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏, –¥–∞—Ç–∞)
3. –í—ã—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –≤ –ø–æ–∑–∏—Ü–∏–∏
4. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
5. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏

–§–æ—Ä–º–∞—Ç: –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞, –±–µ–∑ —Ç–µ–º—ã (subject).`
      }
    ];

    return await this.sendMessage(messages);
  }

  async generateThankYouEmail(interviewData: {
    company: string;
    position: string;
    interviewerName?: string;
    interviewDate: string;
    interviewType: 'phone_screen' | 'interview' | 'technical_interview' | 'final_interview';
    notes?: string;
    keyPoints?: string[];
  }): Promise<string> {
    const interviewTypeNames: Record<string, string> = {
      phone_screen: '—Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è',
      interview: '—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è',
      technical_interview: '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è',
      final_interview: '—Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è'
    };

    const messages: GigaChatMessage[] = [
      {
        role: 'system',
        content: `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∏—Å–∞—Ç–µ–ª—å –¥–µ–ª–æ–≤—ã—Ö –ø–∏—Å–µ–º. –°–æ–∑–¥–∞–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ thank you –ø–∏—Å—å–º–∞ –ø–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä–≤—å—é, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å, —ç–Ω—Ç—É–∑–∏–∞–∑–º –∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤ –ø–æ–∑–∏—Ü–∏–∏. –ü–∏—Å—å–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–µ–ø–ª—ã–º–∏, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏.`
      },
      {
        role: 'user',
        content: `–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ thank you –ø–∏—Å—å–º–æ –ø–æ—Å–ª–µ ${interviewTypeNames[interviewData.interviewType] || '—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è'} –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ${interviewData.company} –Ω–∞ –ø–æ–∑–∏—Ü–∏—é "${interviewData.position}".

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
- –î–∞—Ç–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è: ${interviewData.interviewDate}
- –¢–∏–ø —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è: ${interviewTypeNames[interviewData.interviewType]}
${interviewData.interviewerName ? `- –°–æ–±–µ—Å–µ–¥—É—é—â–∏–π: ${interviewData.interviewerName}` : ''}
${interviewData.notes ? `- –ó–∞–º–µ—Ç–∫–∏ –æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏: ${interviewData.notes}` : ''}
${interviewData.keyPoints && interviewData.keyPoints.length > 0 ? `- –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è: ${interviewData.keyPoints.join(', ')}` : ''}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∏—Å—å–º—É:
1. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ${interviewData.interviewerName ? `–∫ ${interviewData.interviewerName}` : '–∫ –∫–æ–º–∞–Ω–¥–µ'}
2. –í—ã—Ä–∞–∂–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∑–∞ –≤—Ä–µ–º—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
3. –ö—Ä–∞—Ç–∫–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –≤ –ø–æ–∑–∏—Ü–∏–∏
5. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

–§–æ—Ä–º–∞—Ç: –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞, –±–µ–∑ —Ç–µ–º—ã (subject).`
      }
    ];

    return await this.sendMessage(messages);
  }

  async generateInterviewQuestions(jobDescription: string, jobAnalysis?: any): Promise<string> {
    const analysisContext = jobAnalysis ? `
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
- –ì—Ä–µ–π–¥ –ø–æ–∑–∏—Ü–∏–∏: ${jobAnalysis.jobGrade?.level || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
- –¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏: ${jobAnalysis.recommendedSkills?.join(', ') || '–Ω–µ—Ç'}
- ATS –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${jobAnalysis.atsKeywords?.join(', ') || '–Ω–µ—Ç'}
` : '';

    const messages: GigaChatMessage[] = [
      {
        role: 'system',
        content: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º. –ì–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏. –í–∫–ª—é—á–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ, –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –∏ —Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.`
      },
      {
        role: 'user',
        content: `–°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏:

–û–ü–ò–°–ê–ù–ò–ï –í–ê–ö–ê–ù–°–ò–ò:
${jobDescription}
${analysisContext}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. 5-7 —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –Ω–∞–≤—ã–∫–∞–º –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏
2. 3-5 –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (STAR –º–µ—Ç–æ–¥)
3. 2-3 –≤–æ–ø—Ä–æ—Å–∞ –æ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–µ –∫ –ø–æ–∑–∏—Ü–∏–∏
4. 1-2 —Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞
5. 2-3 –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—É

–§–æ—Ä–º–∞—Ç: –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∫—Ä–∞—Ç–∫–∏–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞ (–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π/–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π/–°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–π/–í–æ–ø—Ä–æ—Å –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞).`
      }
    ];

    return await this.sendMessage(messages);
  }

  async evaluateInterviewAnswer(question: string, answer: string, jobDescription: string): Promise<string> {
    const messages: GigaChatMessage[] = [
      {
        role: 'system',
        content: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è—Ö. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –¥–∞–≤–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–æ–¥ STAR –¥–ª—è –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.`
      },
      {
        role: 'user',
        content: `–û—Ü–µ–Ω–∏ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –¥–∞–π –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å:

–í–û–ü–†–û–°: ${question}

–û–¢–í–ï–¢ –ö–ê–ù–î–ò–î–ê–¢–ê: ${answer}

–ö–û–ù–¢–ï–ö–°–¢ –í–ê–ö–ê–ù–°–ò–ò:
${jobDescription}

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –æ—Ü–µ–Ω–∫—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
1. –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ç–≤–µ—Ç–∞ (2-3 –ø—É–Ω–∫—Ç–∞)
2. –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å (2-3 –ø—É–Ω–∫—Ç–∞)
3. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
4. –û—Ü–µ–Ω–∫–∞ (1-10) —Å –∫—Ä–∞—Ç–∫–∏–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º

–ë—É–¥—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.`
      }
    ];

    return await this.sendMessage(messages);
  }
}

export const gigachatAPI = new GigaChatAPI();

// Helper function for chat messages with system prompt
export async function sendChatMessage(
  userMessages: Array<{ role: 'user' | 'assistant'; content: string }>,
  systemPrompt?: string
): Promise<string> {
  const defaultSystemPrompt = "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é —Ä–µ–∑—é–º–µ –∏ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—é–º–µ, –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º, –∏—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ.";
  
  const messages: GigaChatMessage[] = [];
  
  // Add system message if provided or use default
  if (systemPrompt || defaultSystemPrompt) {
    messages.push({
      role: 'system',
      content: systemPrompt || defaultSystemPrompt,
    });
  }
  
  // Add user messages
  userMessages.forEach(msg => {
    messages.push({
      role: msg.role,
      content: msg.content,
    });
  });
  
  return await gigachatAPI.sendMessage(messages);
}