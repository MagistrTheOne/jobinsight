import { config } from 'dotenv';
import { resolve } from 'path';
config({ path: resolve(process.cwd(), '.env.local') });

import { drizzle } from 'drizzle-orm/neon-http';
import { neon } from '@neondatabase/serverless';
import * as schema from '../lib/db/schema';
import { eq } from "drizzle-orm";

if (!process.env.DATABASE_URL) {
  throw new Error('DATABASE_URL is not defined in .env.local');
}

const sql = neon(process.env.DATABASE_URL);
const db = drizzle(sql, { schema });

const { users, subscriptions, usageLimits } = schema;

async function updateAdminUser() {
  try {
    console.log("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin...");

    const email = "maxonyushko71@gmail.com";
    
    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [user] = await db
      .select()
      .from(users)
      .where(eq(users.email, email))
      .limit(1);

    if (!user) {
      console.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:", email);
      process.exit(1);
    }

    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:", user.id);

    // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db
      .update(users)
      .set({
        name: "MagistrTheOne",
        verified: 1, // –°–∏–Ω—è—è –≥–∞–ª–æ—á–∫–∞
        title: "CEO",
        role: "admin",
        updatedAt: new Date(),
      })
      .where(eq(users.id, user.id));

    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: name=MagistrTheOne, verified=1, title=CEO, role=admin");

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É Enterprise
    const [subscription] = await db
      .select()
      .from(subscriptions)
      .where(eq(subscriptions.userId, user.id))
      .limit(1);

    if (subscription) {
      // –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
      await db
        .update(subscriptions)
        .set({
          plan: "enterprise",
          status: "active",
          updatedAt: new Date(),
        })
        .where(eq(subscriptions.id, subscription.id));
      console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ Enterprise");
    } else {
      // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
      await db.insert(subscriptions).values({
        id: crypto.randomUUID(),
        userId: user.id,
        plan: "enterprise",
        status: "active",
      });
      console.log("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Enterprise");
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Unlimited –ª–∏–º–∏—Ç—ã –¥–ª—è Enterprise (Enterprise = –±–µ–∑–ª–∏–º–∏—Ç, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)
    const now = new Date();
    const periodStart = new Date(now.getFullYear(), now.getMonth(), 1);
    
    const [existingLimits] = await db
      .select()
      .from(usageLimits)
      .where(eq(usageLimits.userId, user.id))
      .limit(1);

    if (existingLimits) {
      // –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏–º–∏—Ç—ã - —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ (Enterprise = unlimited)
      await db
        .update(usageLimits)
        .set({
          resumeCount: 0,
          jobCount: 0,
          coverLetterCount: 0,
          periodStart: periodStart,
          updatedAt: new Date(),
        })
        .where(eq(usageLimits.userId, user.id));
      console.log("‚úÖ –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: —Å—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã (Enterprise = unlimited)");
    } else {
      // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã
      await db.insert(usageLimits).values({
        id: crypto.randomUUID(),
        userId: user.id,
        resumeCount: 0,
        jobCount: 0,
        coverLetterCount: 0,
        periodStart: periodStart,
      });
      console.log("‚úÖ –°–æ–∑–¥–∞–Ω—ã –ª–∏–º–∏—Ç—ã: —Å—á–µ—Ç—á–∏–∫–∏ = 0 (Enterprise = unlimited)");
    }

    console.log("üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");
    console.log("üìß Email:", email);
    console.log("üë§ Name:", "MagistrTheOne");
    console.log("‚úÖ Verified: true (—Å–∏–Ω—è—è –≥–∞–ª–æ—á–∫–∞)");
    console.log("üíº Title: CEO");
    console.log("üëë Role: admin");
    console.log("üöÄ Plan: Enterprise (Unlimited)");

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    process.exit(1);
  } finally {
    process.exit(0);
  }
}

updateAdminUser();
